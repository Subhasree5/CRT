import java.io.*;
import java.util.*;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        
        int arr1[] = new int[n];
        int arr2[] = new int[m];

        for (int i = 0; i < n; i++) {
            arr1[i] = sc.nextInt();
        }
        for (int i = 0; i < m; i++) {  // FIXED: Use m instead of n
            arr2[i] = sc.nextInt();
        }

        printUnion(arr1, arr2, n, m);
        printIntersection(arr1, arr2, n, m);
        
        sc.close();
    }

    // Function to print union of two sorted arrays
    public static void printUnion(int[] arr1, int[] arr2, int n, int m) {
        TreeSet<Integer> set = new TreeSet<>();  // TreeSet stores unique values in sorted order
        
        for (int i = 0; i < n; i++) set.add(arr1[i]);
        for (int i = 0; i < m; i++) set.add(arr2[i]);
        
        for (int num : set) {
            System.out.print(num + " ");
        }
        System.out.println();  // Ensure proper formatting
    }

    // Function to print intersection of two sorted arrays
    private static void printIntersection(int[] arr1, int[] arr2, int n, int m) {
        int i = 0, j = 0;
        List<Integer> intersection = new ArrayList<>();

        while (i < n && j < m) {
            if (arr1[i] < arr2[j]) {
                i++;
            } else if (arr2[j] < arr1[i]) {
                j++;
            } else {  // Both elements are equal
                if (intersection.isEmpty() || intersection.get(intersection.size() - 1) != arr1[i]) {
                    intersection.add(arr1[i]);  // Avoid duplicates
                }
                i++;
                j++;
            }
        }
        
        for (int num : intersection) {
            System.out.print(num + " ");
        }
        System.out.println();  // Ensure proper formatting
    }
}
